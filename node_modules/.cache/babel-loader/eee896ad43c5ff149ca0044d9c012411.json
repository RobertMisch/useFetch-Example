{"ast":null,"code":"import { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  // To retrieve an item from localStorage, call localStorage.getItem('itemName')\n  // If that item doesn't exist, it will return undefined\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key); // Parse and return stored json or, if undefined, return initialValue\n\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n  const setValue = value => {\n    // Save state\n    setStoredValue(value); // Save to local storage\n\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/jwoonk/GIT/sprint-preparation/dark-mode/src/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","setValue","value","setItem","stringify"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,YAAN,KAAuB;AAC7C;AACF;AACI,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;AACrD;AACA,UAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFqD,CAGrD;;AACA,WAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,GAL+C,CAA9C;;AAOA,QAAMS,QAAQ,GAAGC,KAAK,IAAI;AACtB;AACAR,IAAAA,cAAc,CAACQ,KAAD,CAAd,CAFsB,CAGtB;;AACAN,IAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4BZ,GAA5B,EAAiCQ,IAAI,CAACK,SAAL,CAAeF,KAAf,CAAjC;AACD,GALH;;AAOA,SAAO,CAACT,WAAD,EAAcQ,QAAd,CAAP;AACD,CAlBH;;AAoBA,eAAeX,eAAf","sourcesContent":["import { useState } from \"react\"\n\nconst useLocalStorage = (key, initialValue) => {\n  // To retrieve an item from localStorage, call localStorage.getItem('itemName')\n// If that item doesn't exist, it will return undefined\n    const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse and return stored json or, if undefined, return initialValue\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n    const setValue = value => {\n        // Save state\n        setStoredValue(value);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(value));\n      };\n  \n    return [storedValue, setValue];\n  };\n\nexport default useLocalStorage"]},"metadata":{},"sourceType":"module"}